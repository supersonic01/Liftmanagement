<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Liftmanagement.Resources">

    <Style x:Key="GridSplitterPreviewStyle" >
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Fill="#80000000"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GridSplitterStyle1" TargetType="{x:Type GridSplitter}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="PreviewStyle" Value="{StaticResource GridSplitterPreviewStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="5">
                        <Canvas RenderOptions.EdgeMode="Aliased" UseLayoutRounding="True"
                                Height="6" VerticalAlignment="Center"
                                Width="50" HorizontalAlignment="Center">
                            <Line X1="29" X2="29" Y1="0" Y2="50"
                                  Stroke="White" StrokeThickness="1"/>
                            <Line X1="28" X2="28" Y1="0" Y2="50"
                                  Stroke="#A0A0A0" StrokeThickness="1"/>
                            <Line X1="23" X2="23" Y1="0" Y2="50"
                                  Stroke="White" StrokeThickness="1"/>
                            <Line X1="22" X2="22" Y1="0" Y2="50"
                                  Stroke="#A0A0A0" StrokeThickness="1"/>
                        </Canvas>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Width="14" Height="14">
                        <Rectangle Fill="{DynamicResource primaryBackgroundBrush}" />
                        <Border Name="ExpandBorder" RenderOptions.EdgeMode="Aliased" BorderBrush="Black" BorderThickness="2">
                            <Path RenderOptions.EdgeMode="Aliased" Name="ExpandPath" Stroke="Black" Margin="0" StrokeThickness="2" Data="M 5 1 L 5 9 M 1 5 L 9 5" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" TargetName="ExpandPath" Value="M 1 5 L 9 5"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ExpandBorder" Property="BorderBrush" Value="Gray" />
                            <Setter TargetName="ExpandPath" Property="Stroke" Value="Gray" />
                            <Setter Property="Data" TargetName="ExpandPath" Value=""/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ControlTemplate x:Key="SimpleExpanderButtonTemp" TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder"

            Background="{TemplateBinding Background}"

            BorderBrush="{TemplateBinding BorderBrush}"

            BorderThickness="{TemplateBinding BorderThickness}"

            Padding="{TemplateBinding Padding}"

            >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Rectangle Fill="Transparent"

                       Grid.ColumnSpan="2"/>
                <Ellipse Name="Circle"

                 Grid.Column="0"

                 Stroke="DarkGray"

                 Width="20"

                 Height="20"

                 HorizontalAlignment="Center"

                 VerticalAlignment="Center"

                 />
                <Path x:Name="Sign"

              Grid.Column="0"

              Data="M 0,5 H 10 M 5,0 V 10 Z"

              Stroke="#FF666666"

              Width="10"

              Height="10"

              StrokeThickness="2"

              HorizontalAlignment="Center"

              VerticalAlignment="Center"

              RenderTransformOrigin="0.5,0.5"

              >
                    <Path.RenderTransform>
                        <RotateTransform Angle="0"/>
                    </Path.RenderTransform>
                </Path>
                <ContentPresenter x:Name="HeaderContent"

                          Grid.Column="1"

                          Margin="4,0,0,0"

                          ContentSource="Content"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <!--Change the sign to minus when toggled-->
            <Trigger Property="IsChecked"

                 Value="True">
                <Setter Property="Data" 

               TargetName="Sign" Value="M 0,5 H 10 Z"/>
            </Trigger>

            <!-- MouseOver, Pressed behaviours-->
            <Trigger Property="IsMouseOver"

                         Value="true">
                <Setter Property="Stroke"

                            Value="#FF3C7FB1"

                            TargetName="Circle"/>
                <Setter Property="Stroke"

                            Value="#222"

                            TargetName="Sign"/>
            </Trigger>
            <Trigger Property="IsPressed"

                         Value="true">
                <Setter Property="Stroke"

                            Value="#FF526C7B"

                            TargetName="Circle"/>
                <Setter Property="StrokeThickness"

                            Value="1.5"

                            TargetName="Circle"/>
                <Setter Property="Stroke"

                            Value="#FF003366"

                            TargetName="Sign"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Simple Expander Template-->
    <ControlTemplate x:Key="SimpleExpanderTemp" TargetType="{x:Type Expander}">
        <DockPanel>
            <ToggleButton x:Name="ExpanderButton"

                      DockPanel.Dock="Top"

                      Template="{StaticResource SimpleExpanderButtonTemp}"

                      Content="{TemplateBinding Header}"

                      IsChecked="{Binding Path=IsExpanded, 
                      RelativeSource={RelativeSource TemplatedParent}}"

                      OverridesDefaultStyle="True"

                      Padding="1.5,0">
            </ToggleButton>
            <ContentPresenter x:Name="ExpanderContent"

                          Visibility="Collapsed"

                          DockPanel.Dock="Bottom"/>
        </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
                <Setter TargetName="ExpanderContent" 

              Property="Visibility" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style x:Key="LableStyle" TargetType="{x:Type Label}">
        <Setter Property="Margin" Value="10,0,10,0"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>

    </Style>

    <Style x:Key="TextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Margin" Value="10,0,10,0"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

    </Style>
</ResourceDictionary>